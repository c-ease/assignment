{"ast":null,"code":"import { HttpEventType, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\nfunction loggingInterceptors(request, next) {\n  console.log(\"\\n[Ongoing request]\", request);\n  return next(request).pipe(tap({\n    next: event => {\n      if (event.type === HttpEventType.Response) {\n        console.log(\"\\n[Incoming Response] Status: \", event.status, event);\n      }\n    }\n  }));\n}\n// called when httpreq is made or httpres is recieved, helps log, cache and modify them\n// clone to add token token gen\nexport const appConfig = {\n  providers: [provideRouter(routes), provideHttpClient(withInterceptors([loggingInterceptors]))]\n};","map":{"version":3,"names":["HttpEventType","provideHttpClient","withInterceptors","tap","provideRouter","routes","loggingInterceptors","request","next","console","log","pipe","event","type","Response","status","appConfig","providers"],"sources":["C:\\Users\\Dhanashree\\Desktop\\SQL Server\\Dapper SQL Server\\Client\\src\\app\\app.config.ts"],"sourcesContent":["import { ApplicationConfig } from '@angular/core';\nimport { HttpEventType, HttpHandlerFn, HttpRequest, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\n\n\nfunction loggingInterceptors(request: HttpRequest<unknown>, next: HttpHandlerFn) {\n  console.log(\"\\n[Ongoing request]\", request)\n  return next(request).pipe(\n    tap({\n      next: event => {\n        if (event.type === HttpEventType.Response) {\n          console.log(\"\\n[Incoming Response] Status: \", event.status, event)\n        }\n      }\n    })\n  );\n}\n\n// called when httpreq is made or httpres is recieved, helps log, cache and modify them\n// clone to add token token gen\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(\n      withInterceptors([loggingInterceptors])\n    ),    \n  ]\n};\n"],"mappings":"AACA,SAASA,aAAa,EAA8BC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AACrH,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,MAAM,QAAQ,cAAc;AAGrC,SAASC,mBAAmBA,CAACC,OAA6B,EAAEC,IAAmB;EAC7EC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,OAAO,CAAC;EAC3C,OAAOC,IAAI,CAACD,OAAO,CAAC,CAACI,IAAI,CACvBR,GAAG,CAAC;IACFK,IAAI,EAAEI,KAAK,IAAG;MACZ,IAAIA,KAAK,CAACC,IAAI,KAAKb,aAAa,CAACc,QAAQ,EAAE;QACzCL,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEE,KAAK,CAACG,MAAM,EAAEH,KAAK,CAAC;;IAEtE;GACD,CAAC,CACH;AACH;AAEA;AACA;AAEA,OAAO,MAAMI,SAAS,GAAsB;EAC1CC,SAAS,EAAE,CACTb,aAAa,CAACC,MAAM,CAAC,EACrBJ,iBAAiB,CACfC,gBAAgB,CAAC,CAACI,mBAAmB,CAAC,CAAC,CACxC;CAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}